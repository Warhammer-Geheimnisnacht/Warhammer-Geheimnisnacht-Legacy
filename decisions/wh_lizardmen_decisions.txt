decisions = {
	reclaim_the_staff_of_jade = {
		is_high_prio = yes
		only_playable = yes
		ai_check_interval = 60

		potential = {
			has_landed_title = e_lustria
			culture_group = lizardman_group
			NOT = { has_global_flag = reclaiming_the_staff_of_jade }
			NOT = { has_artifact = staff_of_jade }
		}
		allow = {
			war = no
			has_landed_title = e_lustria
			culture_group = lizardman_group
		}
		effect = {
			custom_tooltip = { text = reclaim_the_staff_of_jade_TT }
			character_event = { id = KA.1 }
			set_global_flag = reclaiming_the_staff_of_jade
		}
		ai_will_do = {
			factor = 1
		}
	}

	awaken_slann = {
		ai_check_interval = 12
		is_high_prio = yes
		only_independent = yes
		potential = { ai = no
			trait = creature_skink
			is_ruler = yes
			independent = yes
			war = yes
			any_war = { OR = { is_primary_attacker = yes
					 is_primary_defender = yes } }
			NOT = { trait = incapable }
			NOT = { has_character_modifier = wakeslann_cooldown }
			NOT = { trait = defective }
			any_vassal = { trait = creature_slann
					trait = lizardman_sleepingslann }
		}
		allow = { piety = 400
			NOT = { decadence = 75 }

		}
		effect = { piety = -300
			decadence = 2
			hidden_tooltip = { add_character_modifier = { name = wakeslann_cooldown
						hidden = yes
						duration = 900 }
			random_vassal = { limit = { trait = creature_slann
							trait = lizardman_sleepingslann }
					character_event = { id = slizardmen.34 } } }
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0
		} #closesaiwilldo
	} #decision

	amazon_brawling_tournament = {
		ai_check_interval = 3
		is_high_prio = yes
		only_playable = yes
		potential = {
			trait = creature_amazon
			higher_tier_than = COUNT
			is_female = yes
			is_ruler = yes
			NOT = { trait = incapable }
			NOT = { trait = disinherited_amazon }
			custom_tooltip = { text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no }
			war = no
			OR = { NOT = { age = 45 }
				trait = immortal }
			NOT = { has_character_flag = brawling_participant }
			NOT = { has_character_modifier = am_brawling_cooldown }
			NOT = { trait = pregnant }
			OR = { any_courtier = { trait = creature_amazon
					prisoner = no
					NOT = { trait = incapable }
					NOT = { has_character_flag = brawling_participant }
					NOT = { trait = disinherited }
					NOT = { trait = disinherited_amazon }
					NOT = { trait = pregnant }
			custom_tooltip = { text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no }
					age = 16
					OR = { NOT = { age = 45 }
						trait = immortal }
					count = 2 }
			 any_vassal = { trait = creature_amazon
					prisoner = no
					age = 16
					NOT = { trait = incapable }
					NOT = { has_character_flag = brawling_participant }
					NOT = { trait = disinherited }
					NOT = { trait = disinherited_amazon }
					NOT = { trait = pregnant }
			custom_tooltip = { text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no }
					OR = { NOT = { age = 45 }
						trait = immortal }
					count = 2 }
			 }
		}
		allow = { prestige = 150
			wealth = 50
			independent = yes
			war = no
			prisoner = no
			month = 6
			NOT = { month = 11 }
		 	}
		effect = { prestige = -150
			wealth = -50
			decadence = -5
		hidden_tooltip = {
			set_variable = { which = "brawl_player" value = 0 }
			set_character_flag = brawling_participant
			set_character_flag = brawling_host
			set_character_flag = do_not_disturb
			clr_character_flag = am_fight_1
			clr_character_flag = am_fight_2
			clr_character_flag = am_fight_3
			clr_character_flag = am_fight_4
			clr_character_flag = am_fight_5
			clr_character_flag = am_fight_6
			clr_character_flag = am_fight_7
			clr_character_flag = am_fight_8
			clr_character_flag = am_fight_9
			clr_character_flag = am_fight_10
			clr_character_flag = am_fight_11
			diplomatic_immunity = yes
			character_event = { id = slizardmen.61 }
			character_event = { id = slizardmen.61900 days = 30 } #Cleanup flags and stuff
			add_character_modifier = { name = am_brawling_cooldown
						hidden = yes
						duration = 1200 }
			any_vassal = { limit = { trait = creature_amazon
						prisoner = no
						NOT = { trait = incapable }
						NOT = { has_character_flag = brawling_participant }
						NOT = { trait = disinherited }
					NOT = { trait = disinherited_amazon }
			custom_tooltip = { text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no }
						NOT = { trait = pregnant }
						age = 16
						OR = { NOT = { age = 45 }
							trait = immortal } }
					letter_event = { id = slizardmen.61001 days = 2 random = 5 }
					set_character_flag = do_not_disturb
					diplomatic_immunity = yes
					character_event = { id = slizardmen.61900 days = 30 } } #Cleanup flags and stuff
			any_courtier = { limit = { trait = creature_amazon
						prisoner = no
						is_ruler = no
						age = 16
						NOT = { trait = incapable }
						NOT = { has_character_flag = brawling_participant }
						NOT = { trait = disinherited }
					NOT = { trait = disinherited_amazon }
			custom_tooltip = { text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no }
						NOT = { trait = pregnant }
						OR = { NOT = { age = 45 }
							trait = immortal } }
					letter_event = { id = slizardmen.61001 days = 2 random = 5 }
					set_character_flag = do_not_disturb
					diplomatic_immunity = yes
					character_event = { id = slizardmen.61900 days = 30 } } #Cleanup flags and stuff
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 1
			modifier = { factor = 0.1
				 }
			modifier = { factor = 1.5
				 trait = brave }
			modifier = { factor = 1.5
				trait = wroth
				 }
			modifier = { factor = 0.15
				trait = craven
				 }
			modifier = { factor = 0
				trait = maimed
				 }
			modifier = { factor = 0
				trait = wounded
				 }
		} #closesaiwilldo
	} #decision

	search_youth_fountain = {
		ai_check_interval = 36
		is_high_prio = yes
		only_playable = yes
		potential = {
			OR = { trait = creature_amazon
				trait = creature_skink
				trait = creature_human }
			higher_tier_than = BARON
			is_ruler = yes
			war = no
			prisoner = no
			capital_scope = { location = { region = world_new_world_lustria } }
			NOT = { trait = incapable }
			NOT = { trait = immortal }
			NOT = { has_character_flag = searching_the_fountain }
			NOT = { trait = pregnant }
			custom_tooltip = { text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no }
			is_vampire_trigger = no
		}
		allow = { prestige = 50
			wealth = 450
		 	}
		effect = { prestige = -50
			wealth = -450
			if = { limit = { trait = creature_skink }
				decadence = 4 }
		hidden_tooltip = {
			character_event = { id = slizardmen.70 }
			set_character_flag = searching_the_fountain }
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 1
			modifier = { factor = 0.001
				 }
			modifier = { factor = 1.5
				 trait = brave }
			modifier = { factor = 1.5
				trait = wroth
				 }
			modifier = { factor = 2.5
				trait = ambitious
				 }
			modifier = { factor = 0.15
				trait = craven
				 }
			modifier = { factor = 0
				trait = maimed
				 }
			modifier = { factor = 0
				trait = wounded
				 }
		} #closesaiwilldo
	} #decision

	reform_tlaqua = {
		ai_check_interval = 6
		only_rulers = yes
		is_high_prio = yes
		potential = {
		NOT = { has_global_flag = tlaqua_restored }
		capital_scope = { location = { region = world_greater_araby_southlands } }
		age = 16
		is_ruler = yes
		independent = yes
		trait = creature_skink
		has_landed_title = k_tlanqua
		}

		allow = {
		custom_tooltip = { text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no }
		completely_controls = k_tulwark
		wealth = 500
		prestige = 500
		piety = 500
		}

		effect = {
			set_global_flag = tlaqua_restored
			wealth = -500
			piety = 500
			prestige = 500
			ROOT = { character_event = { id = gslizard.0 } }
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 1
		}
	}

	lizardmansouthlands = {
		ai_check_interval = 6
		only_rulers = yes
		is_high_prio = yes
		potential = {
		capital_scope = { location = { region = world_greater_araby_southlands } }
		age = 16
		is_ruler = yes
		independent = yes
		trait = creature_skink
		has_global_flag = tlaqua_restored
		OR = {
		has_landed_title = k_tlanqua
		has_landed_title = k_durbaita
		has_landed_title = k_sudenburg
		}
		}

		allow = {
		custom_tooltip = { text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no }
		completely_controls = c_tlanqua
		completely_controls = c_olohrad
		completely_controls = c_aruk
		wealth = 200
		prestige = 1500
		piety = 1500
		}

		effect = {
			wealth = -200
			piety = 1000
			prestige = 1000
			narrative_event = { id = gslizard.1 }
			}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 1
		}
	}

	# slann_awaken_decision ={ #Wake up a sleeping Slann so he can defend lizarddom

		# potential = {
			# trait = lizardman_sleepingslann
			# NOT = { has_character_flag = waking_slann }
		# }

		# allow = {
			# trait = lizardman_sleepingslann
			# NOT = { has_character_flag = waking_slann }
			# OR = {
				# ai = no
				# any_war = {
					# NOT = { war_score = -20 } # we are losing a war
				# }
				# is_primary_war_defender = yes # we are being attacked!
				# custom_tooltip = {
					# text = lizardman_strong_winds_of_chaos
					# hidden_tooltip = {
						# 1 = {
							# check_variable = {
								# which = "doom_counter" value = 60 #The winds of chaos are strong
							# }
						# }
					# }
				# }
			# }

			# OR = {
				# AND = {
					# piety = 100
					# NOT = {
						# check_variable = {
							# which = "sleep_level" value = 101
						# }
					# }
				# }
				# AND = {
					# piety = 200
					# NOT = {
						# check_variable = {
							# which = "sleep_level" value = 201
						# }
					# }
				# }
				# AND = {
					# piety = 300
					# NOT = {
						# check_variable = {
							# which = "sleep_level" value = 301
						# }
					# }
				# }
				# AND = {
					# piety = 400
					# NOT = {
						# check_variable = {
							# which = "sleep_level" value = 401
						# }
					# }
				# }
				# AND = {
					# piety = 500
					# NOT = {
						# check_variable = {
							# which = "sleep_level" value = 501
						# }
					# }
				# }
			# }
		# }

		# effect = {
			# remove_trait = lizardman_sleepingslann
			# set_character_flag = waking_slann
			# if = {
				# limit = {
					# check_variable = {
						# which = "sleep_level" value = 100
					# }
				# }
				# piety = -100
			# }
			# if = {
				# limit = {
					# check_variable = {
						# which = "sleep_level" value = 200
					# }
				# }
				# piety = -100
			# }
			# if = {
				# limit = {
					# check_variable = {
						# which = "sleep_level" value = 300
					# }
				# }
				# piety = -100
			# }
			# if = {
				# limit = {
					# check_variable = {
						# which = "sleep_level" value = 400
					# }
				# }
				# piety = -100
			# }
			# if = {
				# limit = {
					# check_variable = {
						# which = "sleep_level" value = 500
					# }
				# }
				# piety = -100
			# }
		# }

		# ai_will_do = {
			# factor = 0.5
			# modifier = {
				# factor = 2
				# any_war = {
					# NOT = { war_score = -50 }
				# }
			# }
			# modifier = {
				# factor = 2
				# is_primary_war_defender = yes
			# }
			# modifier = {
				# factor = 2
				# 1 = {
					# check_variable = {
						# which = "doom_counter" value = 90 #The winds of chaos are very strong
					# }
				# }
			# }
		# }
	# }

	# slann_fall_asleep_decision = { #put an awoken Slann back to sleep (to avoid negative events, of course)
		# potential = {
			# NOT = { trait = lizardman_sleepingslann }
			# has_character_flag = waking_slann
		# }
		# allow = {
			# NOT = { trait = lizardman_sleepingslann }
			# has_character_flag = waking_slann
		# }
		# effect = {
			# add_trait = lizardman_sleepingslann
			# piety = "sleep_level"
			# clr_character_flag = waking_slann
		# }
		# ai_will_do = {
			# factor = 1 #AI will always choose to fall asleep, unless the conditions below apply.
			# modifier = {
				# factor = 0
				# any_war = {
					# NOT = { war_score = 100 } #If we are woken up by a war, we'll not fall asleep until we've won (or the war is over)
				# }
			# }
			# modifier = {
				# factor = 0
				# is_primary_war_defender = yes # this should be redundant.
			# }
			# modifier = {
				# factor = 0
				# 1 = {
					# check_variable = {
						# which = "doom_counter" value = 30 #The winds of chaos are still too strong
					# }
				# }
			# }
		# }
	# }

	# deepen_contemplation_decision = { #Slip deeper into contemplation - get better events, but make it more costly to wake up
		# potential = {
			# trait = lizardman_sleepingslann
		# }
		# allow = {
			# trait = lizardman_sleepingslann
			# NOT = {
				# custom_tooltip = {
					# text = OnlyEveryFewYears
					# hidden_tooltip = {
						# has_character_flag = recent_sleep_change
					# }
				# }
			# }
			# NOT = {
				# check_variable = {
					# which = "sleep_level" value = 500
				# }
			# }
		# }
		# effect = {
			# change_variable = {
				# which = "sleep_level" value = 100
			# }
			# set_character_flag = recent_sleep_change
		# }
		# ai_will_do = {
			# factor = 0.01
			# modifier = {
				# factor = 2
				# trait = stressed
			# }
			# modifier = {
				# factor = 10
				# trait = depressed
			# }
			# modifier = {
				# factor = 50
				# trait = lunatic_3
			# }
			# modifier = {
				# factor = 30
				# trait = lunatic_2
			# }
			# modifier = {
				# factor = 20
				# trait = lunatic_1
			# }
			# modifier = {
				# factor = 2
				# trait = ill
			# }
			# modifier = {
				# factor = 5
				# trait = slothful
			# }
			# modifier = {
				# factor = 0
				# war = yes
			# }
			# modifier = {
				# factor = 2
				# NOT = {
					# trait = patient
				# }
			# }
			# modifier = {
				# factor = 2
				# NOT = {
					# trait = diligent
				# }
			# }
		# }
	# }

	# lighter_sleep_decision = { #Gradually open your mind - be tainted by Chaos, but make it easier to wake up
		# potential = {
				# trait = lizardman_sleepingslann
			# }
		# allow = {
			# trait = lizardman_sleepingslann
			# check_variable = {
				# which = "sleep_level" value = 1 #Don't wake up more than waking up
			# }
			# NOT = {
				# custom_tooltip = {
					# text = OnlyEveryFewYears
					# hidden_tooltip = {
						# has_character_flag = recent_sleep_change
					# }
				# }
			# }
		# }
		# effect = {
			# change_variable = {
				# which = "sleep_level" value = -100
			# }
			# set_character_flag = recent_sleep_change
		# }
		# ai_will_do = {
			# factor = 0.01
			# modifier = {
				# factor = 5
				# NOT = {
					# trait = stressed
				# }
			# }
			# modifier = {
				# factor = 5
				# NOT = {
					# trait = depressed
				# }
			# }
			# modifier = {
				# factor = 5
				# NOT = { trait = lunatic_3 }
				# NOT = { trait = lunatic_2 }
			# }
			# modifier = {
				# factor = 5
				# NOT = {
					# trait = ill
				# }
			# }
			# modifier = {
				# factor = 5
				# NOT = {
					# trait = slothful
				# }
			# }
			# modifier = {
				# factor = 5
				# trait = patient
			# }
			# modifier = {
				# factor = 5
				# trait = diligent
			# }
		# }
		# }
}

targetted_decisions = {

	give_province_lizardmen_1 = {
		ai_check_interval = 12
		filter = realm
		ai_target_filter = self
		from_potential = {
			ai = no
			always = no #OBSOLETE
			trait = creature_skink
			NOT = { trait = incapable }
			is_ruler = yes
			NOR = { any_vassal = { has_character_modifier = tagged_recipient }
				any_courtier = { has_character_modifier = tagged_recipient }
				 }
		}

		potential = {
			trait = creature_skink
			always = no #OBSOLETE
			NOT = { character = FROM }
			liege = { character = FROM }
			NOT = { trait = incapable }
			custom_tooltip = { text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no }
			NOT = { trait = disinherited_amazon }
			NOT = { trait = disinherited }                     # Can't do this decision on yourself...
		}
		allow = {
			FROM = { any_demesne_title = { can_be_given_away = yes } }
		}
		effect = {
			add_character_modifier =  { name = tagged_recipient duration = 30 }
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0
		} #closesaiwilldo
	} #decision

	give_province_amazon_1 = {
		ai = no
		filter = realm
		ai_target_filter = self
		from_potential = {
			trait = creature_amazon
			NOT = { trait = incapable }
			is_ruler = yes
			NOR = { any_vassal = { has_character_modifier = tagged_recipient }
				any_courtier = { has_character_modifier = tagged_recipient }
				 }
		}

		potential = {
			trait = creature_amazon
			NOT = { character = FROM }
			liege = { character = FROM }
					NOT = { trait = disinherited_amazon }
			NOT = { trait = disinherited }
			custom_tooltip = { text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no }
		}
		allow = {
			FROM = {
				any_demesne_title = { can_be_given_away = yes }
			}
		}
		effect = {
			add_character_modifier =  { name = tagged_recipient hidden = yes duration = 30 }
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0
		} #closesaiwilldo
	} #decision

	# Amazon - Exile complacent Amazon
	exile_complacent_amazon = {
		ai_check_interval = 6
		filter = dynasty
		ai_target_filter = dynasty
		is_high_prio = yes
		only_rulers = yes
		# hide_in_decisions_list = yes # This decision is shown in the Religion View for each complacent character

		from_potential = {
			is_ruler = yes
			religion = amazon

		}

		potential = {
			is_female = yes
			prisoner = no
			dynasty = FROM
			trait = complacent
			NOT = { trait = disinherited }
			has_regent = no
			OR = { is_ruler = no
				liege = { character = FROM } }
		}

		allow = {
			FROM = {
				piety = 100
				prisoner = no
				NOT = { trait = complacent }
			}
		}
		effect = {
			character_event = { id = slizardmen.44101 }
			FROM = { piety = -100
				decadence = -3 }
		}

		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0
				any_dynasty_member = {
					ai = no
					higher_tier_than = ROOT
					same_realm = ROOT
				}
			}
		}
	}

	#Decision to eat prisoners for the Miyan
	eat_prisoner_miyan = {
		ai_check_interval = 6
		filter = court
		ai_target_filter = court
		only_rulers = yes
		from_potential = {
			religion = kukaili
			primary_title = { higher_tier_than = BARON }
			custom_tooltip = { text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no }
			age = 16
			# trait = creature_halfling
		}

		potential = {
			prisoner = yes
			host = { character = FROM }
			NOT = { trait = khemri_tomb_king }
			# NOT = { religion = FROM }
		}
		allow = {
			prisoner = yes
		}


		effect = {
				hidden_tooltip = { FROM = { character_event = { id = DR_misc.500 } } }
		}


		revoke_allowed = {
			always = no
		}

		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0.25
				}
			modifier = {
				factor = 0.4
				reverse_opinion = { who = FROM value = 20 }
				}
			modifier = {
				factor = 0.25
				reverse_opinion = { who = FROM value = 40 }
				}
			modifier = {
				factor = 5
				NOT = { reverse_opinion = { who = FROM value = -25 } }
				}
			modifier = {
				factor = 0
				FROM = { war = yes }
			}
			modifier = {
				factor = 1.5
				trait = gluttonous
				}
			modifier = {
				factor = 0.75
				prestige = 200
				}
			modifier = {
				factor = 0.05
				prestige = 1000
				}
			modifier = {
				factor = 0
				FROM = { trait = kind }
				}
			modifier = {
				factor = 2
				ROOT = { trait = cruel }
				}
		}
	}
}

title_decisions = {
	give_province_lizardmen_2 = {
		ai_check_interval = 12
		filter = owned
		ai_target_filter = owned

		potential = {
			can_be_given_away = yes
			always = no #OBSOLETE
			FROM = {
				culture_group = lizardman_group
				demesne_size = 2
			}
			holder_scope = {
				always = no #OBSOLETE
				character = FROM
				ai = no
			}
		}
		allow = { FROM = { OR = { any_vassal = { has_character_modifier = tagged_recipient }
					any_courtier = { has_character_modifier = tagged_recipient } } }
		}
		effect = {
			if = {
				limit = { FROM = { any_vassal = { has_character_modifier = tagged_recipient } } }
					FROM = { any_vassal = { limit = { has_character_modifier = tagged_recipient }
							ROOT = { grant_title = PREV
								set_government_type = lizardmen_government
								if = { limit = { higher_tier_than = COUNT }
									add_law = agnatic_succession
									add_law = succ_open_elective } }
							remove_character_modifier = tagged_recipient } }
				break = yes
				}
			if = {
				limit = { FROM = { any_courtier = { has_character_modifier = tagged_recipient } } }
					FROM = { any_courtier = { limit = { has_character_modifier = tagged_recipient }
							ROOT = { grant_title = PREV
								set_government_type = lizardmen_government
								if = { limit = { higher_tier_than = COUNT }
									add_law = agnatic_succession
									add_law = succ_open_elective } }
							remove_character_modifier = tagged_recipient } }
				break = yes
				}
		}

		revoke_allowed = {
			always = no
		}

		ai_will_do = { factor = 0 }
	} #closestitledecision
	
	give_province_amazon_2 = {
		ai_check_interval = 12
		filter = owned
		ai_target_filter = owned
		only_playable = yes

		potential = {
			can_be_given_away = yes
			FROM = {
				trait = creature_amazon
				demesne_size = 2
			}
			holder_scope = {
				character = FROM
				ai = no
			}
		}
		allow = { FROM = { OR = { any_vassal = { has_character_modifier = tagged_recipient }
					any_courtier = { has_character_modifier = tagged_recipient } } }
		}
		effect = {
			if = {
				limit = { FROM = { any_vassal = { has_character_modifier = tagged_recipient } } }
					FROM = { any_vassal = { limit = { has_character_modifier = tagged_recipient }
							ROOT = { grant_title = PREV
								if = { limit = { higher_tier_than = COUNT }
									add_law = enatic_succession } }
							remove_character_modifier = tagged_recipient } }
				break = yes
				}
			if = {
				limit = { FROM = { any_courtier = { has_character_modifier = tagged_recipient } } }
					FROM = { any_courtier = { limit = { has_character_modifier = tagged_recipient }
							ROOT = { grant_title = PREV
								if = { limit = { higher_tier_than = COUNT }
									add_law = enatic_succession } }
							remove_character_modifier = tagged_recipient } }
				break = yes
				}
		}

		revoke_allowed = {
			always = no
		}

		ai_will_do = { factor = 0 }
	} #closestitledecision

	give_province_lizardmen_ai = {
		ai_check_interval = 6
		filter = owned
		ai_target_filter = owned
		only_playable = yes

		potential = {
			can_be_given_away = yes
			always = no #OBSOLETE
			FROM = { culture_group = lizardman_group
				demesne_size = 2
			}
			holder_scope = {
				always = no #OBSOLETE
				character = FROM
				ai = yes
				OR = { any_courtier = {
						is_female = no
						prisoner = no
						NOT = { character = FROM }
					NOT = { trait = disinherited_amazon }
						NOT = { trait = disinherited }
						trait = creature_skink
						}
					 any_vassal = {
						is_female = no
						prisoner = no
						NOT = { character = FROM }
					NOT = { trait = disinherited_amazon }
						NOT = { trait = disinherited }
						trait = creature_skink
						}
				}
			}
			tier = COUNT
			is_capital = no
		}
		allow = {
			always = yes
		}
		effect = {
			FROM = {
			if = {
				limit = { FROM = { any_vassal = { is_female = no
								prisoner = no
								NOT = { character = FROM }
								NOT = { trait = disinherited_amazon }
								NOT = { trait = disinherited }
								trait = creature_skink } } }
					FROM = { any_vassal = { limit = {
									is_female = no
									prisoner = no
									NOT = { character = FROM }
									NOT = { trait = disinherited_amazon }
									NOT = { trait = disinherited }
									trait = creature_skink }
							ROOT = { grant_title = PREV
								if = { limit = { higher_tier_than = COUNT }
									add_law = succ_appointment } }
							clr_character_flag = tagged_recipient } }
				break = yes
				}
			if = {
				limit = { FROM = { any_courtier = {
									is_female = no
									prisoner = no
									NOT = { character = FROM }
									NOT = { trait = disinherited_amazon }
									NOT = { trait = disinherited }
									trait = creature_skink } } }
					FROM = { any_courtier = { limit = {
									is_female = no
									prisoner = no
									NOT = { character = FROM }
									NOT = { trait = disinherited_amazon }
									NOT = { trait = disinherited }
									trait = creature_skink }
							ROOT = { grant_title = PREV
								if = { limit = { higher_tier_than = COUNT }
									add_law = succ_appointment } }
							clr_character_flag = tagged_recipient } }
				break = yes
				}
			}
		}

		revoke_allowed = {
			always = no
		}

		ai_will_do = {
			factor = 1

			modifier = {
				factor = 0.5
				FROM = { trait = greedy }
			}
			modifier = {
				factor = 0
				FROM = { NOT = { over_max_demesne_size = 1 } }
			}
			modifier = {
				factor = 0
				FROM = { NOT = { any_demesne_title = { tier = DUKE
									count = 3 }
						 }
					 }
				ROOT = { tier = DUKE }
			}
		}
	} #closestitledecision

	give_province_amazon_ai = {
		ai_check_interval = 6
		filter = owned
		ai_target_filter = owned
		only_playable = yes

		potential = {
			can_be_given_away = yes
			FROM = { trait = creature_amazon
				demesne_size = 2
			}
			holder_scope = {
				character = FROM
				ai = yes
				OR = { any_courtier = {
						is_female = yes
						prisoner = no
						NOT = { character = FROM }
									NOT = { trait = disinherited_amazon }
						NOT = { trait = disinherited }
						trait = creature_amazon
						}
					 any_vassal = {
						is_female = yes
						prisoner = no
						NOT = { character = FROM }
						NOT = { trait = disinherited }
									NOT = { trait = disinherited_amazon }
						trait = creature_amazon
						}
				}
			}
			tier = COUNT
			is_capital = no
		}
		allow = {
			always = yes
		}
		effect = {
			FROM = {
			if = {
				limit = { FROM = { any_vassal = {
						is_female = yes
						prisoner = no
						NOT = { character = FROM }
						NOT = { trait = disinherited }
									NOT = { trait = disinherited_amazon }
						trait = creature_amazon } } }
					FROM = { any_vassal = { limit = {
						is_female = yes
						prisoner = no
						NOT = { character = FROM }
						NOT = { trait = disinherited }
									NOT = { trait = disinherited_amazon }
						trait = creature_amazon }
							ROOT = { grant_title = PREV
								if = { limit = { higher_tier_than = COUNT }
									add_law = enatic_succession } }
							clr_character_flag = tagged_recipient } }
				break = yes
				}
			if = {
				limit = { FROM = { any_courtier = {
						is_female = yes
						prisoner = no
						NOT = { character = FROM }
						NOT = { trait = disinherited }
									NOT = { trait = disinherited_amazon }
						trait = creature_amazon } } }
					FROM = { any_courtier = { limit = {
						is_female = yes
						prisoner = no
						NOT = { character = FROM }
						NOT = { trait = disinherited }
									NOT = { trait = disinherited_amazon }
						trait = creature_amazon }
							ROOT = { grant_title = PREV
								if = { limit = { higher_tier_than = COUNT }
									add_law = enatic_succession } }
							clr_character_flag = tagged_recipient } }
				break = yes
				}
			}
		}

		revoke_allowed = {
			always = no
		}

		ai_will_do = {
			factor = 1

			modifier = {
				factor = 0.5
				FROM = { trait = greedy }
			}
			modifier = {
				factor = 0
				NOT = { over_max_demesne_size = 1 }
			}
			modifier = {
				factor = 0
				FROM = { NOT = { any_demesne_title = { tier = DUKE
									count = 3 }
						 }
					 }
				ROOT = { tier = DUKE }
			}
		}
	} #closestitledecision
}

plot_decisions = {
	faction_misaligned_chief_ultimatum = {
		ai_check_interval = 12
		is_high_prio = yes
		only_playable = yes

		potential = {
			leads_faction = faction_misaligned_chief
			OR = {
				NOT = { has_character_flag = faction_misaligned_chief_ultimatum_taken }
				had_character_flag = { flag = faction_misaligned_chief_ultimatum_taken days = 7 }
			}
		}
		allow = {
			war = no
			prisoner = no
			custom_tooltip = { text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no }
			liege = {
				NOT = { war_with = ROOT }
				NOT = { reverse_has_truce = ROOT }
			}
			capital_holding = {
				controller = {
					character = ROOT
				}
			}
		}
		effect = {
			liege = {
				letter_event = { id = slizardmen.3 days = 3 }
			}
			hidden_tooltip = {
				set_character_flag = faction_misaligned_chief_ultimatum_taken
			}
		}
		revoke_allowed = {
			always = no
		}

		ai_will_do = {
			factor = 1

			modifier = {
				factor = 0.5 # Slow it down a little
			}

			modifier = {
				factor = 2.5
				liege = { trait = defective }
			}

			modifier = {
				factor = 0
				NOT = {
					faction_power = {
						faction = faction_misaligned_chief
						power = 0.75
					}
				}
			}
			modifier = {
				factor = 0.1
				NOT = {
					faction_power = {
						faction = faction_misaligned_chief
						power = 1.0
					}
				}
			}
			modifier = {
				factor = 0.1
				NOT = {
					faction_power = {
						faction = faction_misaligned_chief
						power = 1.5
					}
				}
			}

			modifier = {
				factor = 0
				liege = {
					any_war = {
						OR = {
							AND = {
								defender = { character = PREV }
								NOT = { using_cb = depose_liege }
								NOT = { using_cb = overthrow_ruler }
								NOT = { using_cb = overthrow_ruler_no_calls }
							}
							AND = {
								attacker = { character = PREV }
								OR = {
									using_cb = invasion
									using_cb = religious
									using_cb = tribal_invasion
									# using_cb = viking_invasion
									using_cb = claim_all
									using_cb = claim
									using_cb = other_claim
								}
							}
						}
					}
				}
			}
		}
	}
	faction_complacent_queen_ultimatum = {
		ai_check_interval = 12
		is_high_prio = yes
		only_playable = yes

		potential = {
			leads_faction = faction_complacent_queen
			OR = {
				NOT = { has_character_flag = faction_complacent_queen_ultimatum_taken }
				had_character_flag = { flag = faction_complacent_queen_ultimatum_taken days = 7 }
			}
		}
		allow = {
			war = no
			prisoner = no
			custom_tooltip = { text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no }
			liege = {
				NOT = { war_with = ROOT }
				NOT = { reverse_has_truce = ROOT }
			}
			capital_holding = {
				controller = {
					character = ROOT
				}
			}
		}
		effect = {
			liege = {
				letter_event = { id = slizardmen.45 days = 3 }
			}
			hidden_tooltip = {
				set_character_flag = faction_complacent_queen_ultimatum_taken
			}
		}
		revoke_allowed = {
			always = no
		}

		ai_will_do = {
			factor = 1

			modifier = {
				factor = 0.5 # Slow it down a little
			}

			modifier = {
				factor = 2.5
				liege = { trait = defective }
			}

			modifier = {
				factor = 0
				NOT = {
					faction_power = {
						faction = faction_misaligned_chief
						power = 0.75
					}
				}
			}
			modifier = {
				factor = 0.1
				NOT = {
					faction_power = {
						faction = faction_misaligned_chief
						power = 1.0
					}
				}
			}
			modifier = {
				factor = 0.1
				NOT = {
					faction_power = {
						faction = faction_misaligned_chief
						power = 1.5
					}
				}
			}

			modifier = {
				factor = 0
				liege = {
					any_war = {
						OR = {
							AND = {
								defender = { character = PREV }
								NOT = { using_cb = depose_liege }
								NOT = { using_cb = overthrow_ruler }
								NOT = { using_cb = overthrow_ruler_no_calls }
							}
							AND = {
								attacker = { character = PREV }
								OR = {
									using_cb = invasion
									using_cb = religious
									using_cb = tribal_invasion
									# using_cb = viking_invasion
									using_cb = claim_all
									using_cb = claim
									using_cb = other_claim
								}
							}
						}
					}
				}
			}
		}
	}
}

settlement_decisions = {
	cutback_jungle_decision = {
		ai = no # Handled by event
		filter = realm_owned
		ai_target_filter = owned
		only_playable = yes

		from_potential = {
		}

		potential = {
			is_capital = yes
			location = { has_province_modifier = lustria_jungle }
			OR = {
				holder_scope = { any_liege = { character = FROM } }
				holder_scope = { character = FROM } }
		}

		allow = {
			FROM = { wealth = 25 }
			location = {
				NOT = { has_province_modifier = recent_cutback }
				OR = {
					has_province_modifier = lustria_medium_jungle
					has_province_modifier = lustria_dense_jungle
					has_province_modifier = lustria_oppressive_jungle
				}
			}
			OR = {
				FROM = {
					in_command = no
			custom_tooltip = { text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no }
				}
				FROM = { job_treasurer = {
							character = yes
							age = 16
							custom_tooltip = { text = IS_NOT_INCAPACITATED
								is_incapacitated_trigger = no }
							in_command = no }
					}
			}
		}

		effect = {
			location = {
				add_province_modifier =  { name = recent_cutback hidden = yes duration = 120 }
				}
			FROM = { character_event = { id = lizardman.261 } } #Choose who will cut back your jungle
		}

		ai_will_do = {
			factor = 0.1
			modifier = {
				factor = 0.1
				FROM = { NOT = { wealth = 50 } }
			}
			modifier = {
				factor = 2
				location = { has_province_modifier = lustria_dense_jungle }
			}
			modifier = {
				factor = 5
				location = { has_province_modifier = lustria_oppressive_jungle }
			}
		}
	}
	z_purge_province = {
		ai_check_interval = 3
		filter = sub_realm_owned
		ai_target_filter = sub_realm_owned
		only_playable = yes

		from_potential = {
		}

		potential = {
			holder_scope = {
				character = FROM
			}
			dejure_liege_title = {
				holder_scope = {
					character = FROM
				}
			}
			FROM = {
				culture_group = lizardman_group
			}
			NOT = {
				location = {
					culture_group = lizardman_group
				}
			}
		}
		allow = {
			holder_scope = {
				#has_character_modifier = favour_sotek
				war = no
			}
		}
		effect = {
			save_event_target_as = purge_prov
			location = {
				add_province_modifier = { name = z_being_purged duration = 3650 }
			}
			FROM = {
				character_event = { id = z_purge.0}
			}
		}
		revoke_allowed = {
			always = no
		}

		ai_will_do = {
			factor = 0
		}
	}
}
